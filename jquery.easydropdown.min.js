/*
* EASYDROPDOWN - A Drop-down Builder for Styleable Inputs and Menus
* Version: 2.1.4
* License: Creative Commons Attribution 3.0 Unported - CC BY 3.0
* http://creativecommons.org/licenses/by/3.0/
* This software may be used freely on commercial and non-commercial projects with attribution to the author/copyright holder.
* Author: Patrick Kunka
* Copyright 2013 Patrick Kunka, All Rights Reserved
*/

!function (a) {
  function b() {
    this.isField = !0, this.down = !1, this.inFocus = !1, this.disabled = !1, this.multiple = !1, this.cutOff = !1, this.hasLabel = !1, this.keyboardMode = !1, this.nativeTouch = !0, this.wrapperClass = "dropdown", this.onChange = null
  }

  b.prototype = {
    constructor: b, instances: {}, init: function (b, c) {
      var d = this;
      a.extend(d, c), d.$select = a(b), d.id = b.id, d.options = [], d.$options = d.$select.find("option"), d.isTouch = "ontouchend" in document, d.$select.removeClass(d.wrapperClass + " dropdown"), d.$select.is(":disabled") && (d.disabled = !0), d.$select.attr("multiple") && (d.multiple = !0), d.$options.length && (d.selected = [], d.$options.each(function (b) {
        var c = a(this);
        c.is(":selected") && (d.selected.push({
          index: b,
          title: c.html()
        }), void 0 === d.focusIndex && (d.focusIndex = b)), c.hasClass("label") && 0 == b ? (d.hasLabel = !0, d.label = c.html(), c.attr("value", "")) : d.options.push({
          domNode: c[0],
          title: c.html(),
          value: c.val(),
          selected: c.is(":selected")
        })
      }), d.selected.length || (d.selected = [
        {
          index: 0,
          title: d.$options.eq(0).html()
        }
      ], d.focusIndex = 0), d.multiple || (d.selected = d.selected[0]), d.render())
    }, render: function () {
      var b = this, c = b.isTouch && b.nativeTouch ? " touch" : "",
        d = b.disabled ? " disabled" : "", e = b.multiple ? " multiple" : "";
      b.$container = b.$select.wrap('<div class="' + b.wrapperClass + c + d + e + '"><span class="old"/></div>').parent().parent(), b.$active = a('<span class="selected"></span>').appendTo(b.$container), b.$carat = a('<span class="carat"/>').appendTo(b.$container), b.$scrollWrapper = a("<div><ul/></div>").appendTo(b.$container), b.$dropDown = b.$scrollWrapper.find("ul"), b.$form = b.$container.closest("form"), a.each(b.options, function () {
        var a = this, c = a.selected ? ' class="active"' : "";
        b.$dropDown.append("<li" + c + ">" + a.title + "</li>")
      }), b.$items = b.$dropDown.find("li"), b.$active.html(b.getSelectionText()), b.cutOff && b.$items.length > b.cutOff && b.$container.addClass("scrollable"), b.getMaxHeight(), b.isTouch && b.nativeTouch ? b.bindTouchHandlers() : b.bindHandlers()
    }, getSelectionText: function () {
      var b, a = this, c = 0;
      if (a.multiple && !a.selected.length || !a.multiple && void 0 === a.selected.title)return a.$options.eq(0).html();
      if (a.multiple) {
        for (a.selected.sort(function (a, b) {
          return a.index == b.index ? 0 : a.index > b.index ? 1 : -1
        }), b = []; c < a.selected.length; ++c)a.hasLabel && 0 == a.selected[c].index ? 1 == a.selected.length && (b = [a.label]) : b.push(a.selected[c].title);
        b = b.join(", ")
      }
      else b = a.selected.title;
      return b
    }, getMaxHeight: function () {
      var a = this;
      for (a.maxHeight = 0, i = 0; i < a.$items.length; i++) {
        var b = a.$items.eq(i);
        if (a.maxHeight += b.outerHeight(), a.cutOff == i + 1)break
      }
    }, bindTouchHandlers: function () {
      var b = this;
      b.$container.on("click.easyDropDown", function () {
        b.$select.focus()
      }), b.$select.on({
        change: function () {
          var c = a(this).find("option:selected"), f = (c.html(), c.val(), []);
          c.each(function (b, c) {
            f.push({title: a(c).html(), index: a(c).index()})
          }), b.selected = b.multiple ? f : f[0], b.$active.html(b.getSelectionText()), b.fireChangeCallback()
        }, focus: function () {
          b.$container.addClass("focus")
        }, blur: function () {
          b.$container.removeClass("focus")
        }
      })
    }, fireChangeCallback: function () {
      var b = this, c = b.$select.find("option:selected");
      "function" == typeof b.onChange && (b.multiple ? b.onChange.call(b.$select[0], c.map(function (b, c) {
        return {title: a(c).html(), value: a(c).val()}
      })) : b.onChange.call(b.$select[0], {title: title, value: value}))
    }, bindHandlers: function () {
      var b = this;
      b.query = "", b.$container.on({
        "click.easyDropDown": function (c) {
          if (b.multiple && b.down && !b.disabled)return void(0 == a(c.target).closest(b.$dropDown).length && b.close());
          b.down || b.disabled ? b.close() : b.open()
        }, "mousemove.easyDropDown": function () {
          b.keyboardMode && (b.keyboardMode = !1)
        }
      }), a("body").on("click.easyDropDown." + b.id, function (c) {
        var d = a(c.target), e = b.wrapperClass.split(" ").join(".");
        !d.closest("." + e).length && b.down && b.close()
      }), b.$items.on({
        "click.easyDropDown": function () {
          var c = a(this).index();
          b.select(c), b.$select.focus()
        }, "mouseover.easyDropDown": function () {
          if (!b.keyboardMode) {
            var c = a(this);
            c.addClass("focus").siblings().removeClass("focus"), b.focusIndex = c.index()
          }
        }, "mouseout.easyDropDown": function () {
          b.keyboardMode || a(this).removeClass("focus")
        }
      }), b.$select.on({
        "focus.easyDropDown": function () {
          b.$container.addClass("focus"), b.inFocus = !0
        }, "blur.easyDropDown": function () {
          b.$container.removeClass("focus"), b.inFocus = !1
        }, "keydown.easyDropDown": function (a) {
          if (b.inFocus) {
            b.keyboardMode = !0;
            var c = a.keyCode;
            if (38 != c && 40 != c && 32 != c || (a.preventDefault(), 38 == c ? (b.focusIndex--, b.focusIndex = b.focusIndex < 0 ? b.$items.length - 1 : b.focusIndex) : 40 == c && (b.focusIndex++, b.focusIndex = b.focusIndex > b.$items.length - 1 ? 0 : b.focusIndex), b.down || b.open(), b.$items.removeClass("focus").eq(b.focusIndex).addClass("focus"), b.cutOff && b.scrollToView(), b.query = ""), b.down)if (9 == c || 27 == c) b.close();
            else {
              if (13 == c)return a.preventDefault(), b.select(b.focusIndex), b.close(), !1;
              if (8 == c)return a.preventDefault(), b.query = b.query.slice(0, -1), b.search(), clearTimeout(b.resetQuery), !1;
              if (38 != c && 40 != c) {
                var d = String.fromCharCode(c);
                b.query += d, b.search(), clearTimeout(b.resetQuery)
              }
            }
          }
        }, "keyup.easyDropDown": function () {
          b.resetQuery = setTimeout(function () {
            b.query = ""
          }, 1200)
        }
      }), b.$dropDown.on("scroll.easyDropDown", function (a) {
        b.$dropDown[0].scrollTop >= b.$dropDown[0].scrollHeight - b.maxHeight ? b.$container.addClass("bottom") : b.$container.removeClass("bottom")
      }), b.$form.length && b.$form.on("reset.easyDropDown", function () {
        var a = b.hasLabel ? b.label : b.options[0].title;
        b.$active.html(a)
      })
    }, unbindHandlers: function () {
      var b = this;
      b.$container.add(b.$select).add(b.$items).add(b.$form).add(b.$dropDown).off(".easyDropDown"), a("body").off("." + b.id)
    }, open: function () {
      var a = this, b = window.scrollY || document.documentElement.scrollTop,
        c = window.scrollX || document.documentElement.scrollLeft,
        d = a.notInViewport(b);
      a.closeAll(), a.getMaxHeight(), a.$select.focus(), window.scrollTo(c, b + d), a.$container.addClass("open"), a.$scrollWrapper.css("height", a.maxHeight + "px"), a.down = !0
    }, close: function () {
      var a = this;
      a.$container.removeClass("open"), a.$scrollWrapper.css("height", "0px"), a.focusIndex = a.multiple ? a.selected.length ? a.selected[0].index : 0 : a.selected.index, a.query = "", a.down = !1
    }, closeAll: function () {
      var a = this, b = Object.getPrototypeOf(a).instances;
      for (var c in b) {
        b[c].close()
      }
    }, select: function (a, b) {
      var c = this;
      "string" == typeof a && (a = c.$select.find("option[value=" + a + "]").index() - 1), void 0 === b && (b = !c.multiple || !c.$items.eq(a).hasClass("active"));
      var h, i, d = c.options[a], e = c.hasLabel ? a + 1 : a,
        f = c.$select.find("option"), g = {index: e, title: d.title};
      if (this.multiple || (c.$items.removeClass("active"), f.removeAttr("selected")), b ? c.$items.eq(a).addClass("active") : c.$items.eq(a).removeClass("active"), f.eq(e).prop("selected", b).parent().trigger("change"), this.multiple) {
        if (b) {
          for (i = !1, h = 0; h < c.selected.length; ++h)c.selected[h].index == e && (i = !0);
          i || c.selected.push(g)
        }
        else for (h = 0; h < c.selected.length; ++h)if (c.selected[h].index == e) {
          c.selected.splice(h, 1);
          break
        }
      }
      else c.selected = b ? g : {index: 0, title: c.$options.eq(0).html()};
      c.focusIndex = h, c.$active.html(c.getSelectionText()), c.fireChangeCallback()
    }, deselect: function (a) {
      this.select(a, !1)
    }, search: function () {
      var a = this, b = function (b) {
        a.focusIndex = b, a.$items.removeClass("focus").eq(a.focusIndex).addClass("focus"), a.scrollToView()
      }, c = function (b) {
        return a.options[b].title.toUpperCase()
      };
      for (i = 0; i < a.options.length; i++) {
        var d = c(i);
        if (0 == d.indexOf(a.query))return void b(i)
      }
      for (i = 0; i < a.options.length; i++) {
        var d = c(i);
        if (d.indexOf(a.query) > -1) {
          b(i);
          break
        }
      }
    }, scrollToView: function () {
      var a = this;
      if (a.focusIndex >= a.cutOff) {
        var b = a.$items.eq(a.focusIndex),
          c = b.outerHeight() * (a.focusIndex + 1) - a.maxHeight;
        a.$dropDown.scrollTop(c)
      }
    }, notInViewport: function (a) {
      var b = this, c = {
        min: a,
        max: a + (window.innerHeight || document.documentElement.clientHeight)
      }, d = b.$dropDown.offset().top + b.maxHeight;
      return d >= c.min && d <= c.max ? 0 : d - c.max + 5
    }, destroy: function () {
      var a = this;
      a.unbindHandlers(), a.$select.unwrap().siblings().remove(), a.$select.unwrap(), delete Object.getPrototypeOf(a).instances[a.$select[0].id]
    }, disable: function () {
      var a = this;
      a.disabled = !0, a.$container.addClass("disabled"), a.$select.attr("disabled", !0), a.down || a.close()
    }, enable: function () {
      var a = this;
      a.disabled = !1, a.$container.removeClass("disabled"), a.$select.attr("disabled", !1)
    }
  };
  var c = function (a, c) {
    a.id = a.id ? a.id : "EasyDropDown" + d();
    var e = new b;
    e.instances[a.id] || (e.instances[a.id] = e, e.init(a, c))
  }, d = function () {
    return ("00000" + (16777216 * Math.random() << 0).toString(16)).substr(-6).toUpperCase()
  };
  a.fn.easyDropDown = function () {
    var e, a = arguments, d = [];
    return e = this.each(function () {
      if (a && "string" == typeof a[0]) {
        var e = b.prototype.instances[this.id][a[0]](a[1], a[2]);
        e && d.push(e)
      }
      else c(this, a[0])
    }), d.length ? d.length > 1 ? d : d[0] : e
  }, a(function () {
    "function" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = "object" == typeof"test".__proto__ ? function (a) {
      return a.__proto__
    } : function (a) {
      return a.constructor.prototype
    }), a("select.dropdown").each(function () {
      var b = a(this).attr("data-settings");
      settings = b ? a.parseJSON(b) : {}, c(this, settings)
    })
  })
}(jQuery);ing"===typeof a[0]){var b=e.prototype.instances[this.id][a[0]](a[1],a[2]);b&&c.push(b)}else f(this,a[0])});return c.length?1<c.length?c:c[0]:b};d(function(){"function"!==typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===typeof"test".__proto__?function(a){return a.__proto__}:function(a){return a.constructor.prototype});d("select.dropdown").each(function(){var a=d(this).attr("data-settings");settings=a?d.parseJSON(a):{};f(this,settings)})})})(jQuery);
